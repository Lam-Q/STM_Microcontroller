/*
 * stm32F407VG_I2C_driver.c
 *
 *  Created on: Jul 16, 2022
 *      Author: lamqi
 */
/*
 *  Peripheral clock setup, GPIO_RegDef_t = base address of GPIOA
 */

#include "stm32F407vg_i2c_driver.h"

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint16_t APB1_PreScaler[5] = {2,4,8,16};

/*
 ****************************** HELPER FUNCTIONS DEFINITION *******************************
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx);
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDR_Flag(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName);


/*
 * HelperFunction Content
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
	pI2Cx->I2C_CR1 |= (1 << I2C_CR1_START);
}

static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
	SlaveAddr = SlaveAddr <<1;
	SlaveAddr &= ~(1);
	pI2Cx->I2C_DR = SlaveAddr;
}

static void I2C_ClearADDR_Flag(I2C_RegDef_t *pI2Cx)
{
	uint32_t dummyRead = pI2Cx->I2C_SR1;
	dummyRead = pI2Cx->I2C_SR2;
	(void)dummyRead;
}

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
	pI2Cx->I2C_CR1 |= (1 << I2C_CR1_STOP);
}



uint32_t RCC_GetPLLOutputClock()
{
return 0;
}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{

	if (pI2Cx->I2C_SR1 & FlagName)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}

uint32_t RCC_GETPCLK1Value(void)
{
	uint32_t pclk1,SystemClk,ahbp,apb1p;

	uint8_t clksrc,temp;

	clksrc = (( RCC->CFGR >>2 )& 0x03);

	if (clksrc == 0)
	{
		SystemClk = 16000000; // 16Mhz
	}
	else  if (clksrc == 1)
	{
		SystemClk = 8000000; //8Mhz
	}
	else if (clksrc == 2)
	{
		SystemClk = RCC_GetPLLOutputClock();
	}

	// To calculate AHB Prescaler
	temp = (( RCC->CFGR >>4  )& 0xF);
	if (temp <8)
	{
		ahbp=1;
	}
	else
	{
		ahbp = AHB_PreScaler[temp-8];
	}


	// To calculate APB1 Prescaler
	temp = (( RCC->CFGR >>10  )& 0x7);
	if (temp <4)
	{
		apb1p = 1;
	}
	else
	{
		apb1p = APB1_PreScaler[temp-4];
	}

	pclk1 = (SystemClk/ahbp)/apb1p;
	return pclk1;
}


void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pI2Cx == I2C1)
		{
			I2C1_PCLK_EN();
		}
		else if (pI2Cx == I2C2)
		{
			I2C2_PCLK_EN();
		}
		else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_EN();
		}
	}
	else
	{
		if(pI2Cx == I2C1)
		{
			I2C1_PCLK_DI();
		}
		else if (pI2Cx == I2C2)
		{
			I2C2_PCLK_DI();
		}
		else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}

/*
 * I2C init and De-init
 */
void I2C_Init(I2CHandle_t *pI2CHandle)
{
	uint32_t tempreg = 0;

	// enable the peripheral Clock i2Cx
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);


	//ack control bit
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl << I2C_CR1_ACK);
	pI2CHandle->pI2Cx->I2C_CR1 = tempreg;


	// configure the FREQ field of CR2
	tempreg = 0;
	tempreg |= RCC_GETPCLK1Value()/1000000U;
	pI2CHandle->pI2Cx->I2C_CR2 = (tempreg &0x3F);

	//program the device own address
	tempreg = 0;
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress <<1;
	tempreg |= (1 << 14);
	pI2CHandle->pI2Cx->I2C_OAR1 = tempreg;

	// CCR calculation
	uint16_t ccr_value = 0;
	tempreg = 0;
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		// mode is standard mode
		ccr_value = ((RCC_GETPCLK1Value()/2*pI2CHandle->I2C_Config.I2C_SCLSpeed));
		tempreg |= (ccr_value & 0xFFF);
	}
	else
	{
		//mode is fast mode
		tempreg |= (1 << I2C_CCR_FS);
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle <<14);
		if (pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
		{
			ccr_value = ((RCC_GETPCLK1Value()/3*pI2CHandle->I2C_Config.I2C_SCLSpeed));
		}else
		{
			ccr_value = ((RCC_GETPCLK1Value()/25*pI2CHandle->I2C_Config.I2C_SCLSpeed));
		}
		tempreg |= (ccr_value & 0xFFF);
	}
	pI2CHandle->pI2Cx->I2C_CCR = tempreg;

	//Trise Calculation
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		// mode is standard mode

		tempreg = (RCC_GETPCLK1Value()*1000000U)+1;
	}else
	{
		// mode is fast mode
		tempreg = ((RCC_GETPCLK1Value()*300 )/1000000U)+1;
	}
	pI2CHandle->pI2Cx->I2C_TRISE = (tempreg & 0x3F);
}

void I2C_DeInit(I2C_RegDef_t *pI2Cx) //use Peripheral RST register
{
	if(pI2Cx == I2C1)
	{
		I2C1_REG_RESET();
	}
	else if (pI2Cx == I2C2)
	{
		I2C2_REG_RESET();
	}
	else if (pI2Cx == I2C3)
	{
		I2C3_REG_RESET();
	}
}

/*
 * Data Send and Receive
 */

void I2C_MasterSendData(I2CHandle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr)
{
	//1. Generate the Start Condition
	I2C_GenerateStartCondition( pI2CHandle->pI2Cx);

	//2. Confirm that start generation is completed by checking the SB Flag in the SR1
	// Note: Until SB is cleared, SCL will be stretched (pulled to LOW)

	while(!I2C_GetFlagStatus( pI2CHandle->pI2Cx, I2C_SB_FLAG));

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)

	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);


	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));

	//5. Clear the ADDR flag according to its software sequence
	// Note: Until the ADDR is cleared SCL will be stretcched (PULLED TO LOW)

	I2C_ClearADDR_Flag(pI2CHandle->pI2Cx);

	//6. Send the data until Len becomes 0

	while(Len >0)
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG)); //Wait till TXE is set
		pI2CHandle->pI2Cx->I2C_DR = *pTxbuffer;
		pTxbuffer++;
		Len--;

	}
	//7. When len becomes zero wait for TXE = 1 and BTF = 1 before generating the STOP condition
	// Note: TXE=1, BTF = 1, means that both SR and DR are empty and next transmission should begin
	// when BTF=1 SCL will be stretched (Pulled to LOW)

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG)); //Wait till TXE is set

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG)); //Wait till TXE is set
	pI2CHandle->pI2Cx->I2C_DR = *pTxbuffer;


	//8. Generate STOP Condition and master need not to wait for the completion of stop condition.
	// Note: Generating STOP, automatically clears the BTF

	I2C_GenerateStopCondition( pI2CHandle->pI2Cx);
}


/*
 * IRQ Configuration and ISR Handling
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if (IRQNumber <= 31)
		{
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);

		}else if (IRQNumber >31 && IRQNumber < 64)  //32 to 64
		{
			//program ISER1 register
			*NVIC_ISER1 |= (1 << (IRQNumber%32));
		}
		else if (IRQNumber >= 64 && IRQNumber < 96)
		{
			//program ISER2 register
			*NVIC_ISER2 |= (1 << (IRQNumber%64));
		}
	}
	else
	{
		if (IRQNumber <= 31)
		{
			//program ISER0 register
			*NVIC_ISER0 &= ~(1 << IRQNumber);
		}else if (IRQNumber >31 && IRQNumber < 64)  //32 to 64
		{
			//program ISER1 register
			*NVIC_ISER1 &= ~(1 << (IRQNumber%32));
		}
		else if (IRQNumber >= 64 && IRQNumber < 96)
		{
			//program ISER2 register
			*NVIC_ISER2 &= ~(1 << (IRQNumber%64));
		}
	}
}
void I2C_IRQPriorityHandling(uint8_t IRQNumber, uint32_t IRQPriority)
{
	uint8_t iprx= IRQNumber/4;
	uint8_t iprx_section = IRQNumber % 4;
	uint8_t shift_amount = (8*iprx_section + 8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASE_ADDR + (iprx)) |= (IRQPriority <<  shift_amount);

}



/*
 *  Other Peripheral Control APIs
 */

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{

		if(EnOrDi == ENABLE)
		{
			pI2Cx->I2C_CR1 |= (1 << I2C_CR1_PE);
			//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
		}else
		{
			pI2Cx->I2C_CR1 &= ~(1 << 0);
		}


}






__weak void I2C_ApplicationEventCallback(I2CHandle_t *pI2CHandle,uint8_t AppEv);
