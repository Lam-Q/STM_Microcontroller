/*
 * Stm32f407vg_spi_driver.c
 *
 *  Created on: Jul 4, 2022
 *      Author: lamqi
 */

#include "stm32F407vg_spi_driver.h"


/*
 *  Peripheral clock setup
 */
/*************************************************************************
 * @fn   			- SPI_PeriClock Control
 *
 * @param[in]		- base address of the SPI peripheral
 * @param[in]		- ENABLE or DISABLE macros
 * @param[in]
 *
 * @return			- none
 *
 * @Note			- none
 *
 ***************************************************************************/

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDI == ENABLE)
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_EN();
		}
		else if (pGPIOx == GPIOB)
		{
			GPIOB_PCLK_EN();
		}
		else if (pGPIOx == GPIOC)
		{
			GPIOC_PCLK_EN();
		}
		else if (pGPIOx == GPIOD)
		{
			GPIOD_PCLK_EN();
		}
		else if (pGPIOx == GPIOE)
		{
			GPIOE_PCLK_EN();
		}
	}
	else
	{
		if(pGPIOx == GPIOA)
		{
			GPIOA_PCLK_DI();
		}
		else if (pGPIOx == GPIOB)
		{
			GPIOB_PCLK_DI();
		}
		else if (pGPIOx == GPIOC)
		{
			GPIOC_PCLK_DI();
		}
		else if (pGPIOx == GPIOD)
		{
			GPIOD_PCLK_DI();
		}
		else if (pGPIOx == GPIOE)
		{
			GPIOE_PCLK_DI();
		}
	}
}
/*
 * SPI init and De-init
 */
/*************************************************************************
 * @fn   			- SPI_Init
 *
 * @param[in]		- Handle of the SPI Peripheral
 * @param[in]		-
 * @param[in]
 *
 * @return			- none
 *
 * @Note			- none
 *
 ***************************************************************************/

void SPI_Init(SPI_Handle_t *pSPIHandle)
{

}

/*************************************************************************
 * @fn   			- SPI_Deinit
 *
 * @param[in]		- BASE ADDRESS of the SPI Peripheral
 * @param[in]		-
 * @param[in]
 *
 * @return			- none
 *
 * @Note			- none
 *
 ***************************************************************************/
void SPI_DeInit(SPI_RegDef_t *pSPIx); //use Peripheral RST register

/*
 * Data Send and Receive
 */

/*************************************************************************
 * @fn   			- SPI_SendData
 *
 * @param[in]		- BASE ADDRESS of the SPI Peripheral
 * @param[in]		- pTxBuffer
 * @param[in]		- Length of the message
 *
 * @return			- none
 *
 * @Note			- none
 *
 ***************************************************************************/

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{

}
/*************************************************************************
 * @fn   			- SPI_ReceiveData
 *
 * @param[in]		- BASE ADDRESS of the SPI Peripheral
 * @param[in]		- pRxBuffer
 * @param[in]		- Length of the message
 *
 * @return			- none
 *
 * @Note			- none
 *
 ***************************************************************************/
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{

}


/*
 * IRQ Configuration and ISR Handling
 */

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi);
void GPIO_IRQPriorityHandling(uint8_t IRQNumber, uint32_t IRQPriority);
void GPIO_IRQHandling(SPI_Handle_t *pHandle);


























































