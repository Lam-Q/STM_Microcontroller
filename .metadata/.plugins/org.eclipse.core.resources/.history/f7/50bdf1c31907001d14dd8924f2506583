/*
 * 006spi_tx_Testing.c
 *
 *  Created on: Jul 9, 2022
 *      Author: lamqi
 */

#include "string.h"
#include "stm32f407VG.h"
#include "stm32f407VG_gpio_driver.h"
#include "stm32f407VG_spi_driver.h"

void SPI_GPIOInits(void)
{
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;    //assign the base address of pin
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
	GPIO_Init(&SPIPins);

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
	GPIO_Init(&SPIPins);

	//MISO
//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
//	GPIO_Init(&SPIPins);

	//NSS
//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
//	GPIO_Init(&SPIPins);
}

void SPI2_Inits(void)
{
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
	SPI2handle.SPI_Config.SPI_BusConfig= SPI_BUS_CONFIG_FD;
	SPI2handle.SPI_Config.SPI_CPHA = SPI_CPHA_HIGH;
	SPI2handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
	SPI2handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
	SPI2handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
	SPI2handle.SPI_Config.SPI_SSM = SPI_SSM_EN;   // Software Slave management enabled for NSS pins
	SPI2handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32; //Generates the max SCLK Speed

	SPI_Init(&SPI2handle);
}

int main(void)
{


	char user_data[] = "gggg";
	/*
	 * PB14 --> SPI2_MISO
	 * PB15 --> SPI2_MOSI
	 * PB13 --> SPI2_SCLK
	 * PB12 --> SPI2_NSS
	 * ALT Function mode : 5
	 */

	SPI_GPIOInits();
	SPI2_Inits();

	//This makes NSS signal internally HIGH so it will avoid MODF error
	SPI_SSIConfig(SPI2, ENABLE);
	//enable the SPI2 Peripheral
	SPI_PeripheralControl(SPI2, ENABLE);


	SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));


	while( SPI_GetFlagStatus(SPI2,SPI_BSY_FLAG) );

	//Disable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,DISABLE);
	while(1);



	return 0;
}
